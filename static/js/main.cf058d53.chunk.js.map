{"version":3,"sources":["components/Header.js","components/Wrapper.js","utils/API.js","components/EmployeeList.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Wrapper","children","axios","get","Employees","props","employees","map","employee","alt","src","picture","medium","name","first","last","phone","email","Date","dob","date","toLocaleDateString","Main","state","search","sortType","getEmployees","API","then","res","setState","data","results","console","log","catch","err","handleSortState","output","document","querySelector","value","sortedEmployees","sort","a","b","localeCompare","this","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","style","margin","color","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0RAYeA,MATf,WACI,OACE,yBAAKC,UAAU,UACb,kDACA,mFCGOC,MARf,YAAgC,IAAbC,EAAY,EAAZA,SACjB,OACI,yBAAKF,UAAU,WACXE,I,iDCHK,EACC,WAEZ,OAAOC,IAAMC,IAAI,kDCaNC,MAhBf,SAAmBC,GACjB,OACE,+BACKA,EAAMC,UAAUC,KAAI,SAAAC,GAAQ,OAC3B,4BACE,4BAAI,yBAAKC,IAAG,MAASC,IAAKF,EAASG,QAAQC,UAC3C,4BAAKJ,EAASK,KAAKC,MAAnB,IAA2BN,EAASK,KAAKE,MACzC,4BAAKP,EAASQ,OACd,4BAAKR,EAASS,OACd,4BAAK,IAAIC,KAAKV,EAASW,IAAIC,MAAMC,4BC0F9BC,E,4MAhGXC,MAAQ,CACNjB,UAAW,GACXkB,OAAQ,GACRC,SAAU,I,EAOZC,aAAe,WACbC,IACGC,MAAK,SAACC,GACL,EAAKC,SAAS,CACZxB,UAAWuB,EAAIE,KAAKC,UAEtBC,QAAQC,IAAI,EAAKX,MAAMjB,cAExB6B,OAAM,SAACC,GAAD,OAASH,QAAQC,IAAIE,O,EAGhCC,gBAAkB,WAChB,IACMC,EADmBC,SAASC,cAAc,kBAChBC,MAChC,GAAe,SAAXH,EAAmB,CACrB,IAAMI,EAAkB,EAAKnB,MAAMjB,UACnCoC,EAAgBC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE/B,KAAKE,KAAK+B,cAAcD,EAAEhC,KAAKE,SAChE,EAAKe,SAAS,CAAExB,UAAWoC,IAE7B,GAAe,QAAXJ,EAAkB,CACpB,EAAKR,SAAS,CAAEL,SAAU,QAC1B,IAAMiB,EAAkB,EAAKnB,MAAMjB,UACnCoC,EAAgBC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEzB,IAAIC,KAAK0B,cAAcD,EAAE1B,IAAIC,SAC9D,EAAKU,SAAS,CAAExB,UAAWoC,IAEd,SAAXJ,GACF,EAAKR,SAAS,CAAEL,SAAU,U,kEA7B5BsB,KAAKrB,iB,+BAkCH,OACA,6BACI,yBAAK3B,UAAU,iDACX,4BACIA,UAAU,iBACViD,KAAK,SACLC,cAAY,WACZC,cAAY,aACZC,gBAAc,YACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMtD,UAAU,yBAEpB,yBAAKA,UAAU,+BAA+BuD,GAAG,aAC7C,yBAAKvD,UAAU,UACf,yBAAKA,UAAU,qBACX,4BAAQA,UAAW,eACfwD,MAAO,CACHC,OAAQ,OACRC,MAAO,SAEXH,GAAG,gBACHI,SAAUX,KAAKV,iBAEf,4BAAQI,MAAM,QAAd,WACA,4BAAQA,MAAM,QAAd,aACA,4BAAQA,MAAM,OAAd,UAGR,yBAAK1C,UAAU,YAGvB,yBAAKA,UAAU,aACf,2BAAOA,UAAU,SACb,+BACA,4BACI,qCACA,oCACA,qCACA,qCACA,qCAGJ,kBAAC,EAAD,CACA4C,KAAMI,KAAKxB,MAAME,SACjBnB,UAAWyC,KAAKxB,MAAMjB,mB,GAxFnBqD,IAAMC,W,MCaVC,MAXf,WACE,OACE,yBAAK9D,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCY+D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAAS+B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAyC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.cf058d53.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Header.css';\n\nfunction Header () {\n    return (\n      <div className='header'>\n        <h1>Employee Directory</h1>\n        <p>Filter employees alphabetically or chronologically</p>\n      </div>\n    )\n  }\n\nexport default Header;","import React from 'react';\n\nfunction Wrapper({ children }) {\n  return (\n      <div className='wrapper'>\n        { children }\n      </div>\n  );\n}\n\nexport default Wrapper;","import axios from \"axios\";\n\nexport default {\n  getEmployees: function() {\n\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n  }\n};","import React from 'react';\n\nfunction Employees(props) {\n  return (\n    <tbody>\n        {props.employees.map(employee => (\n          <tr>\n            <td><img alt={`img`} src={employee.picture.medium}></img></td>\n            <td>{employee.name.first} {employee.name.last}</td>\n            <td>{employee.phone}</td>\n            <td>{employee.email}</td>\n            <td>{new Date(employee.dob.date).toLocaleDateString()}</td>\n          </tr>\n        ))}\n      </tbody>\n  );\n}\n\nexport default Employees;","import React from 'react';\nimport API from '../utils/API';\nimport Employees from './EmployeeList';\n\nclass Main extends React.Component {\n    state = {\n      employees: [],\n      search: '',\n      sortType: '',\n    };\n  \n    componentDidMount() {\n      this.getEmployees();\n    }\n\n    getEmployees = () => {\n      API.getEmployees()\n        .then((res) => {\n          this.setState({\n            employees: res.data.results\n          });\n          console.log(this.state.employees);\n        })\n        .catch((err) => console.log(err));\n    };\n    \n    handleSortState = () => {\n      const selectedEmployee = document.querySelector('#sortSelection');\n      const output = selectedEmployee.value;\n      if (output === 'name') {\n        const sortedEmployees = this.state.employees;\n        sortedEmployees.sort((a, b) => a.name.last.localeCompare(b.name.last));\n        this.setState({ employees: sortedEmployees });\n      }\n      if (output === 'dob') {\n        this.setState({ sortType: 'dob' });\n        const sortedEmployees = this.state.employees;\n        sortedEmployees.sort((a, b) => a.dob.date.localeCompare(b.dob.date));\n        this.setState({ employees: sortedEmployees });\n      }\n      if (output === 'none') {\n        this.setState({ sortType: 'none' });\n      }\n    };\n\n    render() {\n        return (\n        <div>\n            <nav className='navbar navbar-expand-lg navbar-light bg-light'>\n                <button\n                    className='navbar-toggler'\n                    type='button'\n                    data-toggle='collapse'\n                    data-target='#navbarNav'\n                    aria-controls='navbarNav'\n                    aria-expanded='false'\n                    aria-label='Toggle navigation'\n                >\n                    <span className='navbar-toggler-icon' />\n                </button>\n                <div className='collapse navbar-collapse row' id='navbarNav'>\n                    <div className='col-5'></div>\n                    <div className='input-group col-2'>\n                        <select className ='form-control'\n                            style={{\n                                margin: '10px',\n                                color: 'black'\n                            }}\n                            id='sortSelection'\n                            onChange={this.handleSortState}\n                            >\n                            <option value='none'>Sort by</option>\n                            <option value='name'>Last Name</option>\n                            <option value='dob'>Year</option>\n                        </select>\n                    </div>\n                    <div className='col-5'></div>\n                </div>\n            </nav>\n            <div className='container'>\n            <table className='table'>\n                <thead>\n                <tr>\n                    <th>Image</th>\n                    <th>Name</th>\n                    <th>Phone</th>\n                    <th>Email</th>\n                    <th>DOB</th>\n                </tr>\n                </thead>\n                <Employees\n                sort={this.state.sortType}\n                employees={this.state.employees}\n                />\n            </table>\n            </div>\n        </div>\n\n    )};\n};\n\nexport default Main;","import React from 'react';\nimport Header from './components/Header';\nimport Wrapper from './components/Wrapper';\nimport Main from './components/Main';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Wrapper>\n        <Header />\n        <Main />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}